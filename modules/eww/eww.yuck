;;
(defwidget bar []
  (centerbox :orientation "v" :hexpand false
    (box :space-evenly false :valign "start" :halign "center" :vexpand true :hexpand false :orientation "v" :spacing 10
      (launch)
      (mem)
      (cpu)
      (disk)
      (wifi)
    )

    (workspaces :halign "center" :vexpand true :hexpand false :orientation "v")

    (box :valign "end" :hexpand false :vexpand true :orientation "v" :space-evenly false :spacing 10
      (battery)
      (powerbutton)
      (time)
    )
  )
)


;; Variables
(defvar search false)
(defvar time false)
(defvar cal false)

;; ━━━ WIDGETS ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

;; ━━━ MEMORY ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defwidget mem []
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_RAM.used_mem_perc}
                        :class "membar"
                        :thickness 4
      (button
        :class "iconmem"
        :tooltip " ${round(EWW_RAM.used_mem_perc,1)}%"
        "")
    )
  )
)

;; ━━━ CPU ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defwidget cpu []
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_CPU.avg}
                        :class "cpubar"
                        :thickness 4
      (button
        :class "iconmem"
        :tooltip " ${round(EWW_CPU.avg,1)}%"
        "")
    )
  )
)

;; ━━━ DISK ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defwidget disk []
  (box :vexpand "false" :hexpand "false"
    (circular-progress  :value {EWW_DISK["/"].used_perc}
                        :class "diskbar"
                        :thickness 4
      (button
        :class "iconmem"
        :tooltip " ${round(EWW_DISK["/"].used_perc,1)}%"
        "")
    )
  )
)


;; ━━━ WIFI ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defvar wifi "{}")
(defpoll wifi :interval "3s" "./scripts/wifi.sh")

(defwidget wifi []
 (box :vexpand false :hexpand false :orientation "v"
   (label :text {wifi.icon}
          :limit-width 10
          :tooltip {wifi.status}
          :class "label wifi"
    )
  )
)

;; ━━━ BATTERY ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defvar battery "{}")
(defpoll battery :interval "2s" "./scripts/battery.sh")

(defwidget battery []
 (box :vexpand false :hexpand false :orientation "v" :visible true
   (label :text {battery.icon}
          :limit-width 10
          :tooltip "${battery.status}: ${battery.percent}"
          :class "label battery"
    )
  )
)


;; ━━━ VOLUME ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

(defvar volume-level 50)
(defvar volume-muted false)

(defwindow volume
  :monitor 0
  :geometry (geometry :y "100px" :x "0px" :width "250px" :height "200px" :anchor "center bottom")
  :windowtype "dock"
  :wm-ignore true
  :stacking "fg"

  (box :class "volume-window"
       :orientation "v"
       :space-evenly "false"
    (box :class "volume-widget"
         :orientation "h"
         :space-evenly false
         :spacing 10
      (label :text {volume-muted ? "" :
                    volume-level == 0 ? "" :
                    volume-level < 32 ? "" :
                    volume-level < 65 ? "" :
                    ""}

             :class 'volume-icon ${volume-muted ? "volume-icon-muted" : ""}'
      )
      (scale :class 'volume-slider ${volume-muted ? "volume-slider-muted" : ""}'
             :hexpand "true"
             :min 0
             :max 100
             :height 8
             :marks true
             :value volume-level
             :onchange "pamixer --set-volume {}"))))

;; ━━━ TIME ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(defpoll hour :interval "10s" "date +%H")
(defpoll minute :interval "10s" "date +%M")
(defpoll dateVar :interval "600s" "date '+%A %d.%m.%y'")

(defwidget time []
  (eventbox :cursor "hand"  :hexpand false :vexpand false
                :tooltip "${dateVar}"
    (box :orientation "v" :hexpand false :vexpand false :space-evenly false :class "clock"
    (button		:class "date"
                :onclick "eww open --toggle calendar"	"${hour}")

    (button		:class "date"
                :onclick "eww open --toggle calendar"	"${minute}")
    )
  )
)




(defvar bright-level 50)
(defvar bright-muted false)
(defwindow brightness
  :monitor 0
  :geometry (geometry :y "-60px" :x "60px" :width "300px" :height "150px" :anchor "bottom left")
  :wm-ignore true
  :stacking "fg"

  (box :class "volume-window"
       :orientation "v"
       :space-evenly "false"
    (box :class "volume-widget"
         :orientation "h"
         :space-evenly false
         :spacing 10
      (label :text ""
             :class 'volume-icon'
      )
      (scale :class 'volume-slider'
             :hexpand "true"
             :min 0
             :max 100
             :height 8
             :marks true
             :value bright-level
             :onchange "brightnessctl set {}%"))))
(defwidget launch []
  (button		:class "icon nixos"
                :hexpand true
                :onclick "wofi --show drun --xoffset=44 --yoffset=12 --width=12% --height=984 --style=$HOME/.config/nixos/config/wofi.css --term=footclient --prompt=Run --allow_images=true &"	"")
)

(defwidget powerbutton []
  (eventbox :cursor "hand"
  (button		:class "icon button-off"
                :onclick "eww open powermenu --toggle &"	"")
  )
)
                                                  (defwidget powermenucontent []
                                                  (box :orientation "h"
  :class "powermenu-container"
  (box :class "shutdown-btn-box"
       :orientation "h"
    (button :class "btn"
            :tooltip "Shutdown"
            :onclick "eww close powermenu && shutdown now"
      "⏻")
    )
  (box :class "reboot-btn-box"
       :orientation "h"
    (button :class "btn"
            :tooltip "Reboot"
            :onclick "eww close powermenu && reboot"
      "")
    )
  (box :class "exit-btn-box"
       :orientation "h"
    (button :class "btn"
            :tooltip "Suspend"
            :onclick "systemctl suspend"
      "")
    )
  )
)

(defwindow powermenu
  :monitor 0
  :geometry (geometry :x "0%"
  :y "0%"
  :width "30%"
  :height "15%"
  :anchor "center center")
  :wm-ignore true
  (powermenucontent))

(deflisten workspaces_listen "./scripts/workspaces.sh")
(defwidget workspaces []
  (literal :content workspaces_listen))


(defwindow calendar
  :monitor 0
  :geometry (geometry :x "-20px"
  :y "7%"
  :width "270px"
  :height "60px"
  :anchor "top right")
  (calendar :class "cal")
  )
(defwindow bar
  :monitor 0
  :exclusive false 
  :geometry (geometry :height "1056px" :x "-4px" :y "12px"
  :width "52px"
  :anchor "top left")
  :stacking "fg"
  (bar))
